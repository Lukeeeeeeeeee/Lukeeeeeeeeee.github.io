<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于JavaScript的变量提升</title>
    <url>/2020/03/30/%E5%85%B3%E4%BA%8EJavaScript%E7%9A%84%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>关于JavaScript的函数声明和函数表达式</title>
    <url>/2020/03/30/%E5%85%B3%E4%BA%8EJavaScript%E7%9A%84%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E5%92%8C%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>一道关于JavaScript综合面试题</title>
    <url>/2020/03/30/%E4%B8%80%E9%81%93%E5%85%B3%E4%BA%8EJavaScript%E7%BB%BC%E5%90%88%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>作者：Wscats<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1dzY2F0cy9hcnRpY2xlcy9pc3N1ZXMvODU=" title="https://github.com/Wscats/articles/issues/85">https://github.com/Wscats/articles/issues/85<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>以下是我之前确实面试过的一道题，当时答的很不好，事后也想不起来了，正好前两天看到一个公众号发出来了，把思路也给捋清楚了，就记录到这里了。</p>
<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Foo() &#123;</span><br><span class="line">    getName &#x3D; function() &#123; alert(1); &#125;</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br><span class="line">Foo.getName &#x3D; function() &#123; alert(2); &#125;</span><br><span class="line">Foo.prototype.getName &#x3D; function() &#123; alert(3); &#125;</span><br><span class="line">var getName &#x3D; function() &#123; alert(4); &#125;</span><br><span class="line">function getName() &#123; alert(5); &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 请写出一下输出结果</span><br><span class="line">Foo.getName();</span><br><span class="line">getName();</span><br><span class="line">Foo().getName();</span><br><span class="line">getName();</span><br><span class="line">new Foo.getName();</span><br><span class="line">new Foo().getName();</span><br><span class="line">new new Foo().getName();</span><br></pre></td></tr></table></figure>
<h4 id="Foo-getName"><a href="#Foo-getName" class="headerlink" title="Foo.getName();"></a>Foo.getName();</h4><p>让我们来分析下，<br>首先定义了一个 Foo 函数，<br>之后为Foo创建了一个叫 getName 的静态属性并赋值一个匿名函数，<br>之后为Foo的原型对象新创建了一个叫 getName 的匿名函数。<br>创建了一个名为 getName 函数表达式，<br>声明了一个 getName 函数。</p>
<p>第一问，Foo 函数也是对象，所以自然访问的就是函数上的静态属性，即<code>Foo.getName = function() { alert(2); }</code>;</p>
<p>以下例子用来加深理解</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function User(name) &#123;</span><br><span class="line">    var name &#x3D; name; &#x2F;&#x2F; 私有属性</span><br><span class="line">    this.name &#x3D; name; &#x2F;&#x2F; 公开属性</span><br><span class="line">    function getName() &#123; &#x2F;&#x2F; 私有方法</span><br><span class="line">        alert(1);</span><br><span class="line">        console.log(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">User.prototype.getName &#x3D; function() &#123; &#x2F;&#x2F; 公有方法</span><br><span class="line">    alert(2);</span><br><span class="line">&#125;</span><br><span class="line">User.name &#x3D; &#39;user&#39;; &#x2F;&#x2F; 静态属性</span><br><span class="line">User.getName &#x3D; function() &#123; &#x2F;&#x2F; 静态方法</span><br><span class="line">    alert(3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="getName"><a href="#getName" class="headerlink" title="getName();"></a>getName();</h4><p>第二问，直接调用 getName 函数。既然是直接调用，那么就是访问当前上下文作用域内的叫 getName 的函数，所有主要看 4 和 5。<br>这里有个坑，一是变量声明提升，二是函数表达式和函数声明的区别。</p>
<p>相关文档可参考 <a href="/2020/03/30/%E5%85%B3%E4%BA%8EJavaScript%E7%9A%84%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E5%92%8C%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/" title="关于JavaScript的函数声明和函数表达式">关于JavaScript的函数声明和函数表达式</a> 和 <a href="/2020/03/30/%E5%85%B3%E4%BA%8EJavaScript%E7%9A%84%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/" title="关于JavaScript的变量提升">关于JavaScript的变量提升</a></p>
<h5 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 函数声明</span><br><span class="line">function test() &#123;</span><br><span class="line">    alert(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 函数表达式</span><br><span class="line">var test &#x3D; function () &#123;</span><br><span class="line">    alert(2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先看下面这个经典问题，在一个程序里面同时用函数声明和函数表达式定义一个名为 getName 的函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getName(); &#x2F;&#x2F; oaoafly</span><br><span class="line">var getName &#x3D; function() &#123;</span><br><span class="line">    console.log(&#39;wscat&#39;);</span><br><span class="line">&#125;</span><br><span class="line">getName(); &#x2F;&#x2F; wscat</span><br><span class="line">function getName() &#123;</span><br><span class="line">    console.log(&#39;oaoafly&#39;);</span><br><span class="line">&#125;</span><br><span class="line">getName(); &#x2F;&#x2F; wscat</span><br></pre></td></tr></table></figure>

<p>上面的代码看起来很类似，但实际上，JavaScript函数上的一个“缺陷”就体现在JavaScript两种类型的函数定义上。</p>
<ul>
<li><strong>JavaScript解释器中存在一种变量声明被提升的机制，也就是说函数声明会被提升到作用域的最前面，即使写代码的时候卸载最后面，也还是会被提升至最前面</strong></li>
<li><strong>而用函数表达式创建的函数是在运行时进行赋值，且要等到表达式赋值完成后才调用</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var getName; &#x2F;&#x2F; 变量被提升，此时为 undefined</span><br><span class="line"></span><br><span class="line">getName(); &#x2F;&#x2F; oaoafly 函数被提升  这里受函数声明的影响，虽然函数声明在最后，但是被提升到最前面来了</span><br><span class="line">var getName &#x3D; function() &#123;</span><br><span class="line">    console.log(&#39;wscat&#39;);</span><br><span class="line">&#125;</span><br><span class="line">getName(); &#x2F;&#x2F; wscat  函数表达式此时才被赋值并覆盖函数声明的定义</span><br><span class="line">function getName() &#123;</span><br><span class="line">    console.log(oaoafly);</span><br><span class="line">&#125;</span><br><span class="line">getName(); &#x2F;&#x2F; wscat  这里就执行了函数表达式的值</span><br></pre></td></tr></table></figure>

<p>所以可以分解为这两个简单的问题来看清楚区别的本质</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var getName;</span><br><span class="line">console.log(getName); &#x2F;&#x2F; undefined</span><br><span class="line">getName(); &#x2F;&#x2F; Uncaught TypeError: getName is not a function</span><br><span class="line">var getName &#x3D; function() &#123;</span><br><span class="line">    console.log(&#39;wscat&#39;);</span><br><span class="line">&#125;</span><br><span class="line">getName(); &#x2F;&#x2F; wscat</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var getName;</span><br><span class="line">console.log(getName); &#x2F;&#x2F; function getName() &#123; console.log(&#39;oaoafly&#39;); &#125;</span><br><span class="line">getName(); &#x2F;&#x2F; oaoafly</span><br><span class="line">function getName() &#123;</span><br><span class="line">    console.log(&#39;oaoafly&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个区别看似微不足道，但在某些情况下确实是一个难以察觉并且“致命”的陷阱。出现这个陷阱的本质原因体现在这两种类型在函数提升和运行时机（解析时/运行时）上的差异。<br>当然我们给一个总结：JavaScript中<strong>函数声明</strong>和<strong>函数表达式</strong>是存在区别的，<strong>函数声明</strong>在JavaScript解析时，进行函数提升，因此在同一个作用域内，不管函数声明在哪里定义，该函数都可以进行调用。而<strong>函数表达式</strong>的值是在JavaScript运行时确定，并且在表达式赋值完成后，该函数才能调用。</p>
<p>所以第二问 <code>getName();</code> 答案为4，5的函数声明被 4 的函数表达式覆盖了。</p>
<h4 id="Foo-getName-1"><a href="#Foo-getName-1" class="headerlink" title="Foo().getName();"></a>Foo().getName();</h4><p><code>Foo().getName();</code> 先执行了 Foo 函数，然后调用 Foo 函数的返回值（this）对象的 getName 属性函数。<br>Foo 函数的第一句 <code>getName = function() { alert(1); };</code> 是一句函数赋值语句，注意它没有 var 声明，所以先向当前 Foo 函数作用域中寻找 getName 变量，没有。再向当前函数作用域上层，即外层作用域内寻找是否含有 getName 变量，找到了，也就是第二问 <code>var getName = function() { alert(4); };</code>，将此变量的值赋值为 <code>function() { alert(1); };</code>。<br>此处实际上是将外层作用域内的 getName 函数修改了。</p>
<blockquote>
<p>注意：此处若依然没有找到会一直向上查找到 window 对象，若 window 对象中也没有 getName 属性，就在 window 对象中创建一个 getName 变量并赋值 <code>function() { alert(1); };</code>。</p>
</blockquote>
<p>之后 Foo 函数的返回值是 this。this 的指向是由所在函数的调用方式决定的。而此处是直接调用方式，this 指向 window 对象，相当于执行 window.getName()，而 window 中的 getName 已经被修改为 <code>function() { alert(1); };</code>，所以最终输出 1。</p>
]]></content>
      <tags>
        <tag>面试题汇总</tag>
      </tags>
  </entry>
  <entry>
    <title>手动实现Promise</title>
    <url>/2020/03/30/%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0Promise/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>Promise</tag>
      </tags>
  </entry>
</search>
